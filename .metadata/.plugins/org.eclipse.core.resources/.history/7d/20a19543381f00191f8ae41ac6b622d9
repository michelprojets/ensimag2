package fr.ensimag.deca.tree;

import fr.ensimag.deca.context.Type;
import fr.ensimag.deca.DecacCompiler;
import fr.ensimag.deca.context.ClassDefinition;
import fr.ensimag.deca.context.ContextualError;
import fr.ensimag.deca.context.Definition;
import fr.ensimag.deca.context.EnvironmentExp;
import fr.ensimag.deca.context.ExpDefinition;
import fr.ensimag.deca.context.StringType;
import fr.ensimag.deca.context.TypeDefinition;
import fr.ensimag.deca.context.TypeEnum;
import fr.ensimag.deca.tools.IndentPrintStream;
import fr.ensimag.deca.tools.SymbolTable;
import fr.ensimag.ima.pseudocode.ImmediateString;
import fr.ensimag.ima.pseudocode.instructions.WSTR;
import java.io.PrintStream;
import org.apache.commons.lang.Validate;

/**
 * String literal
 *
 * @author gl19
 * @date 01/01/2019
 */
public class StringLiteral extends AbstractStringLiteral {

    @Override
    public String getValue() {
        return value;
    }

    private String value;

    public StringLiteral(String value) {
        Validate.notNull(value);
        this.value = value;
    }

    @Override
    public Type verifyExpr(DecacCompiler compiler, EnvironmentExp localEnv,
            ClassDefinition currentClass) throws ContextualError {
        SymbolTable table = compiler.getSymbolTable();
        Type type = new StringType(table.create(TypeEnum.STRING.toString()));
        setType(type);
        return type;
    }

    @Override
    protected void codeGenPrint(DecacCompiler compiler) {
        compiler.addInstruction(new WSTR(new ImmediateString(value)));
    }
    
    @Override
    protected void codeGenPrintHex(DecacCompiler compiler) {
        this.codeGenPrint(compiler);
    }

    @Override
    public void decompile(IndentPrintStream s) {
        s.print(setSlash());
    }
    
    /*
    parse le value, et lorsqu'il trouve un \, ecrit \\
    de meme pour "", ecrit \"
    */
    private String setSlash(){
        StringBuilder strBuff = new StringBuilder();
        strBuff.append('\"');
        for(int i = 0; i<value.length(); i++){
            char courant = value.charAt(i);
            if(courant == '\\'){
                strBuff.append("\\\\");
            } else if(courant == '"'){
                strBuff.append("\\\"");
            } else {
                strBuff.append(courant);
            }
        }
        strBuff.append('\"');
        return strBuff.toString();
    }

    @Override
    protected void iterChildren(TreeFunction f) {
        // leaf node => nothing to do
    }

    @Override
    protected void prettyPrintChildren(PrintStream s, String prefix) {
        // leaf node => nothing to do
    }
    
    @Override
    String prettyPrintNode() {
        return "StringLiteral (" + value + ")";
    }
    
    /* \\ -> \ */
    public static String setCorrect(String s) {   	
    	StringBuilder res = new StringBuilder();
    	StringBuilder str = new StringBuilder(s);
    	// suppression des " " aux extremites
    	str.deleteCharAt(0);
    	str.deleteCharAt(str.length()-1);
    	// '\\' -> '\' */
    	char[] str_array = str.toString().toCharArray();
    	if (str_array.length > 1) {
	    	res.append(str_array[0]);
	    	char prec = str_array[0];
	    	for (int i = 1; i<str_array.length; ++i) {
	            if(str_array[i] == '\\' && prec == '\\'){
	                res.append('\\');
	            }
	            else {
	                res.append(str_array[i]);
	            }
	            prec = str_array[i];
	    	}
    	}
    	return res.toString();
    }
    
    public static void main(String[] args){
    	String test = "\\";
    	//String test = "\"te\\\\aaaa \\\\ st\"";
    	System.out.println(test);
    	System.out.println(StringLiteral.setCorrect(test));
    }

}
