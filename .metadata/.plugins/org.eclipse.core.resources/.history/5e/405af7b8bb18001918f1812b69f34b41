package fr.ensimag.deca.tree;

import fr.ensimag.deca.context.Type;
import fr.ensimag.deca.DecacCompiler;
import fr.ensimag.deca.codegen.CodeGenOpBool;
import fr.ensimag.deca.context.BooleanType;
import fr.ensimag.deca.context.ClassDefinition;
import fr.ensimag.deca.context.ContextualError;
import fr.ensimag.deca.context.EnvironmentExp;
import fr.ensimag.deca.context.TypeEnum;
import fr.ensimag.deca.tools.SymbolTable;

/**
 *
 * @author gl19
 * @date 01/01/2019
 */
public abstract class AbstractOpBool extends AbstractBinaryExpr {

	CodeGenOpBool code;
	
    public AbstractOpBool(AbstractExpr leftOperand, AbstractExpr rightOperand) {
        super(leftOperand, rightOperand);
    }

    @Override
    public Type verifyExpr(DecacCompiler compiler, EnvironmentExp localEnv,
            ClassDefinition currentClass) throws ContextualError {
        Type typeLeft = getLeftOperand().verifyExpr(compiler, localEnv, currentClass);
        Type typeRight = getRightOperand().verifyExpr(compiler, localEnv, currentClass);
        if(!typeLeft.isBoolean() || !typeRight.isBoolean()){
            throw new ContextualError("expression sur des non booleen : " + this.toString(), getLocation());
        }
        SymbolTable table = compiler.getSymbolTable();
        Type type = new BooleanType(table.create(TypeEnum.BOOLEAN.toString()));
        setType(type);
        return type;
    }
    
    @Override
    public void codeGenExpr(DecacCompiler compiler, int registerNum, int labelNum) {
        
    }

}
