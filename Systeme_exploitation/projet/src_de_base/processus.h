#include <inttypes.h>
#include <malloc.c.h>

#ifndef __PROCESSUS_H__
#define __PROCESSUS_H__

#define NB_REGISTRES_TO_SAVE 5
#define EXEC_STACK_SIZE 512
#define NB_PROCS 4
#define NB_CAR_PID 2
#define NB_CAR_ETAT 9
#define NB_CAR_PROC 14  // NB_CAR_PID + 3 + NB_CAR_ETAT
#define NB_CAR_NULL 11  // NB_CAR_PROC - NB_CAR_PID - 1
#define NB_COL_SCREEN 80  // deja defini dans timer.h

typedef enum ETAT{
    ELU = 0,
    ELLIGIBLE,
    ENDORMI,
    MOURANT
} ETAT;

struct Processus;

typedef struct Processus{
    uint32_t pid;
    char * nom;
    ETAT etat;
    uint32_t nb_secs_reveil;
    uint32_t * save_registers;  // on pouvait laisser le tableau statique
    uint32_t * exec_stack;  // on pouvait laisser le tableau statique
    struct Processus * suivant;
} Processus;

/* une file de processus */
typedef struct File{
    Processus * tete;
    Processus * queue;
} File;

Processus ** table_processus; // la table des processus

File * file_activables;  // la file des processus activables

Processus * liste_endormis; // la liste des processus endormis (invariant : liste ordonnee par heure de reveil le plus tot)

Processus * liste_mourrants;  // la liste des processus mourrants (qui vont mourir au prochain appel de ordonnancement() donc au prochain tic)

uint32_t nb_procs_crees;  // le nombre de processus qui ont ete crees (et qui ne sont pas encore termines)

Processus * proc_elu; // pointeur vers le processus (invariant : pid = indice dans la table)

extern uint32_t get_nb_secs();

extern void idle();

extern void init_processus();

extern void ordonnance();

extern void affichage_chaine(char * chaine, uint8_t lig, uint8_t col);

extern void affichage_etat();

#endif
